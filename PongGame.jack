// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Pong/PongGame.jack

//r1 MADE remover scores
//r2 MADE Game over quando bola tocar no teto
//r3 MADE bastão no topo (sem diferença de controle um do outro)
//r4 MADE bola ricochetear
//r5 MADE diferenciar controle dos bastãos
//r6 MADE consertar ricochete
//r7 MADE Mensagem game over personalizada
//r8 MADE centralizar game over

/**
 * Represents a Pong game.
 */
class PongGame {

    static PongGame instance; // the singelton, a Pong game instance     
    field Bat bat;            // the bat
    field Bat bat2;
    field Ball ball;          // the ball
    field int wall;           // the current wall that the ball is bouncing off of.
    field boolean exit;       // true when the game is over
    field int roundWinner;
    //field int score;          // the current score.
    field int lastWall;       // the last wall that the ball bounced off of.

    // The current width of the bat
    field int batWidth;
    field int bat2Width;

    /** Constructs a new Pong game. */
    constructor PongGame new() {
	    do Screen.clearScreen();
        let batWidth = 50;  // initial bat size
        let bat2Width = 50;
        
        let bat = Bat.new(230, 229, batWidth, 7);
        // int Ax, int Ay, int Awidth, int Aheight
        let bat2 = Bat.new(230, 7, bat2Width, 7);

        let ball = Ball.new(253, 222, 0, 511, 15, 229); // aqui muda a definição de localização das paredes
        // int Ax, int Ay, int AleftWall, int ArightWall, int AtopWall, int AbottomWall
        do ball.setDestination(400,0);
        //do Screen.drawRectangle(0, 238, 511, 240);
	    //do Output.moveCursor(22,0);
	    //do Output.printString("Score: 0");
	
	    let exit = false;
        
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
        do bat2.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of Pong game, and stores it. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Returns the single instance of this Pong game. */
    function PongGame getInstance() {
        return instance;
    }

    /** Starts the game, and andles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                
                do bat.move();
                do bat2.move();

                do moveBall();
                do Sys.wait(50);
            }

            if (key = 97) { // letra a
                do bat2.setDirection(1);
            } else {
                if (key = 100) {
                    do bat2.setDirection(2);
                }
            }



            if (key = 130) {  // seta esquerda (a = 97)
                do bat.setDirection(1); 
                //do bat2.setDirection(1);
            }
	        else {
	            if (key = 132) {  // seta direita (d = 100)
                    do bat.setDirection(2); 
                    //do bat2.setDirection(2);
                }
		        else {
                    if (key = 140) { let exit = true; }
		        }
            }

            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                
                do bat.move();
                do bat2.move();

                do moveBall();
                do Sys.wait(50);
            }
        }

	    if (exit) {
            if (roundWinner = 1) { // se jogador 1 venceu
                do Output.moveCursor(10,20);
                do Output.printString("Game Over - Jogador 1 venceu");
            } else { // se jgoador 2 venceu
                do Output.moveCursor(10,20);
                do Output.printString("Game Over - Jogador 2 venceu");
            }

	    }
            
        return;
    }

    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */
    method void moveBall() {
        var int bouncingDirection, batLeft, batRight, ballLeft, ballRight, bat2Left, bat2Right;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            // posição do bastão 1
            let batLeft = bat.getLeft();
            let batRight = bat.getRight();
            // pegando posição do bastão
            let bat2Left = bat2.getLeft();
            let bat2Right = bat2.getRight();
            // pegando posição da bola
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();
            // tocou no teto
            if (wall = 3) {
                // conferir se a bola bateu dentro do bastão 2

                // se extremidade direita da bola estiver antes da extremidade esquerda do bastão = game over
                // se extremidade esquerda da bola estiver depois da extremidade direita do bastão = game over
                let exit = (bat2Left > ballRight) | (bat2Right < ballLeft); 

                if (~exit) { // se bola não saiu
                    if (ballRight < (bat2Left + 10)) { 
                        let bouncingDirection = -1; 
                    }
                    else {
                        if (ballLeft > (bat2Right - 10)) { let bouncingDirection = 1; }
                    }

                    let bat2Width = bat2Width - 2;
                    do bat2.setWidth(bat2Width);      
                } else {
                    let roundWinner = 1;
                }
            }
            // tocou no chao
            if (wall = 4) {
                let exit = (batLeft > ballRight) | (batRight < ballLeft); // verifica se bola tocou dentro do bastão
                if (~exit) {
                    if (ballRight < (batLeft + 10)) { let bouncingDirection = -1; }
                    else {
                        if (ballLeft > (batRight - 10)) { let bouncingDirection = 1; }
                    }

                    // diminui a largura do bastão conforme ricocheteia
                    let batWidth = batWidth - 2;
                    do bat.setWidth(batWidth);      
                } else {
                    let roundWinner = 2;
                }
            }

            do ball.bounce(bouncingDirection);
        }
        return;
    }
}